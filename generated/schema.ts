// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProductSale extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProductSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProductSale must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProductSale", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProductSale | null {
    return changetype<ProductSale | null>(
      store.get("ProductSale", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get productProxyAddress(): Bytes {
    let value = this.get("productProxyAddress");
    return value!.toBytes();
  }

  set productProxyAddress(value: Bytes) {
    this.set("productProxyAddress", Value.fromBytes(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    return value!.toBigInt();
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    return value!.toBytes();
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get initialPrice(): BigInt {
    let value = this.get("initialPrice");
    return value!.toBigInt();
  }

  set initialPrice(value: BigInt) {
    this.set("initialPrice", Value.fromBigInt(value));
  }

  get paymentPrice(): BigInt {
    let value = this.get("paymentPrice");
    return value!.toBigInt();
  }

  set paymentPrice(value: BigInt) {
    this.set("paymentPrice", Value.fromBigInt(value));
  }

  get userToProduct(): Bytes {
    let value = this.get("userToProduct");
    return value!.toBytes();
  }

  set userToProduct(value: Bytes) {
    this.set("userToProduct", Value.fromBytes(value));
  }
}

export class ProductCounter extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProductCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProductCounter must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProductCounter", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProductCounter | null {
    return changetype<ProductCounter | null>(
      store.get("ProductCounter", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get productSalesCount(): BigInt {
    let value = this.get("productSalesCount");
    return value!.toBigInt();
  }

  set productSalesCount(value: BigInt) {
    this.set("productSalesCount", Value.fromBigInt(value));
  }

  get usersBought(): BigInt {
    let value = this.get("usersBought");
    return value!.toBigInt();
  }

  set usersBought(value: BigInt) {
    this.set("usersBought", Value.fromBigInt(value));
  }
}

export class UserToProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserToProduct entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserToProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserToProduct", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UserToProduct | null {
    return changetype<UserToProduct | null>(
      store.get("UserToProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get product(): Bytes {
    let value = this.get("product");
    return value!.toBytes();
  }

  set product(value: Bytes) {
    this.set("product", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get totalPoints(): BigInt {
    let value = this.get("totalPoints");
    return value!.toBigInt();
  }

  set totalPoints(value: BigInt) {
    this.set("totalPoints", Value.fromBigInt(value));
  }
}

export class PaymentToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PaymentToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PaymentToken", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): PaymentToken | null {
    return changetype<PaymentToken | null>(
      store.get("PaymentToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }
}
